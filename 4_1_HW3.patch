Index: src/main/resources/db/initDB.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/initDB.sql	(revision 344194272326ea47d1c3bd1db12cf5d54c9d3d8b)
+++ src/main/resources/db/initDB.sql	(revision )
@@ -1,4 +1,5 @@
 DROP TABLE IF EXISTS user_roles;
+DROP TABLE IF EXISTS meals;
 DROP TABLE IF EXISTS users;
 DROP SEQUENCE IF EXISTS global_seq;
 
@@ -21,5 +22,14 @@
   user_id INTEGER NOT NULL,
   role    VARCHAR,
   CONSTRAINT user_roles_idx UNIQUE (user_id, role),
+  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
+);
+
+CREATE TABLE meals (
+  id          INTEGER PRIMARY KEY DEFAULT nextval('global_seq'),
+  user_id     INTEGER NOT NULL,
+  date_time    TIMESTAMP,
+  description TEXT,
+  calories    INT,
   FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
 );
Index: src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcUserMealRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcUserMealRepositoryImpl.java	(revision 344194272326ea47d1c3bd1db12cf5d54c9d3d8b)
+++ src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcUserMealRepositoryImpl.java	(revision )
@@ -1,9 +1,18 @@
 package ru.javawebinar.topjava.repository.jdbc;
 
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.support.DataAccessUtils;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
+import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
 import org.springframework.stereotype.Repository;
 import ru.javawebinar.topjava.model.UserMeal;
 import ru.javawebinar.topjava.repository.UserMealRepository;
 
+import javax.sql.DataSource;
+import java.sql.Timestamp;
 import java.time.LocalDateTime;
 import java.util.List;
 
@@ -15,28 +24,68 @@
 @Repository
 public class JdbcUserMealRepositoryImpl implements UserMealRepository {
 
+    private static final RowMapper<UserMeal> ROW_MAPPER =
+            (rs, rowNum) ->
+                    new UserMeal(rs.getInt("id"), rs.getTimestamp("date_time").toLocalDateTime(),
+                            rs.getString("description"), rs.getInt("calories"));
+
+    @Autowired
+    private JdbcTemplate jdbcTemplate;
+
+    @Autowired
+    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
+
+    private SimpleJdbcInsert insertUserMeal;
+
+    @Autowired
+    public JdbcUserMealRepositoryImpl(DataSource dataSource) {
+        this.insertUserMeal = new SimpleJdbcInsert(dataSource)
+                .withTableName("meals")
+                .usingGeneratedKeyColumns("id");
+    }
+
     @Override
-    public UserMeal save(UserMeal UserMeal, int userId) {
+    public UserMeal save(UserMeal userMeal, int userId) {
+        MapSqlParameterSource map = new MapSqlParameterSource()
+                .addValue("id", userMeal.getId())
+                .addValue("description", userMeal.getDescription())
+                .addValue("calories", userMeal.getCalories())
+                .addValue("date_time", Timestamp.valueOf(userMeal.getDateTime()))
+                .addValue("user_id", userId);
+
+        if (userMeal.isNew()) {
+            Number newId = insertUserMeal.executeAndReturnKey(map);
+            userMeal.setId(newId.intValue());
+        } else {
+            if (namedParameterJdbcTemplate.update(
+                    "UPDATE meals SET description=:description, calories=:calories, date_time=:date_time " +
+                            " WHERE id=:id AND user_id=:user_id", map) == 0) {
-        return null;
-    }
+                return null;
+            }
+        }
+        return userMeal;
+    }
 
     @Override
     public boolean delete(int id, int userId) {
-        return false;
+        return jdbcTemplate.update("DELETE FROM meals WHERE id=? AND user_id=?", id, userId) != 0;
     }
 
     @Override
     public UserMeal get(int id, int userId) {
-        return null;
+        List<UserMeal> userMeals = jdbcTemplate.query(
+                "SELECT * FROM meals WHERE id = ? AND user_id = ?", ROW_MAPPER, id, userId);
+        return DataAccessUtils.singleResult(userMeals);
     }
-
-    @Override
     public List<UserMeal> getAll(int userId) {
-        return null;
+        return jdbcTemplate.query(
+                "SELECT * FROM meals WHERE user_id=? ORDER BY date_time DESC", ROW_MAPPER, userId);
     }
 
     @Override
     public List<UserMeal> getBetween(LocalDateTime startDate, LocalDateTime endDate, int userId) {
-        return null;
+        return jdbcTemplate.query(
+                "SELECT * FROM meals WHERE user_id=?  AND date_time BETWEEN  ? AND ? ORDER BY date_time DESC",
+                ROW_MAPPER, userId, Timestamp.valueOf(startDate), Timestamp.valueOf(endDate));
     }
-}
+}
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/repository/mock/InMemoryUserMealRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/repository/mock/InMemoryUserMealRepositoryImpl.java	(revision 344194272326ea47d1c3bd1db12cf5d54c9d3d8b)
+++ src/test/java/ru/javawebinar/topjava/repository/mock/InMemoryUserMealRepositoryImpl.java	(revision )
@@ -39,7 +39,7 @@
         save(new UserMeal(LocalDateTime.of(2015, Month.MAY, 31, 20, 0), "Ужин", 510), USER_ID);
 
         save(new UserMeal(LocalDateTime.of(2015, Month.JUNE, 1, 14, 0), "Админ ланч", 510), ADMIN_ID);
-        save(new UserMeal(LocalDateTime.of(2015, Month.JUNE, 1, 21, 0), "Админ ужин ", 510), ADMIN_ID);
+        save(new UserMeal(LocalDateTime.of(2015, Month.JUNE, 1, 21, 0), "Админ ужин", 1500), ADMIN_ID);
     }
 
     @Override
\ No newline at end of file
Index: src/main/resources/db/populateDB.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/populateDB.sql	(revision 344194272326ea47d1c3bd1db12cf5d54c9d3d8b)
+++ src/main/resources/db/populateDB.sql	(revision )
@@ -1,4 +1,5 @@
 DELETE FROM user_roles;
+DELETE FROM meals;
 DELETE FROM users;
 ALTER SEQUENCE global_seq RESTART WITH 100000;
 
@@ -9,5 +10,16 @@
 INSERT INTO users (name, email, password)
 VALUES ('Admin', 'admin@gmail.com', 'admin');
 
-INSERT INTO user_roles (role, user_id) VALUES ('ROLE_USER', 100000);
-INSERT INTO user_roles (role, user_id) VALUES ('ROLE_ADMIN', 100001);
+INSERT INTO user_roles (role, user_id) VALUES
+  ('ROLE_USER', 100000),
+  ('ROLE_ADMIN', 100001);
+
+INSERT INTO meals (date_time, description, calories, user_id) VALUES
+  ('2015-05-30 10:00:00', 'Завтрак', 500, 100000),
+  ('2015-05-30 13:00:00', 'Обед', 1000, 100000),
+  ('2015-05-30 20:00:00', 'Ужин', 500, 100000),
+  ('2015-05-31 10:00:00', 'Завтрак', 500, 100000),
+  ('2015-05-31 13:00:00', 'Обед', 1000, 100000),
+  ('2015-05-31 20:00:00', 'Ужин', 510, 100000),
+  ('2015-06-01 14:00:00', 'Админ ланч', 510, 100001),
+  ('2015-06-01 21:00:00', 'Админ ужин', 1500, 100001);
Index: src/main/java/ru/javawebinar/topjava/model/UserMeal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/UserMeal.java	(revision 344194272326ea47d1c3bd1db12cf5d54c9d3d8b)
+++ src/main/java/ru/javawebinar/topjava/model/UserMeal.java	(revision )
@@ -48,8 +48,16 @@
         return id;
     }
 
-    public boolean isNew() {
-        return id == null;
+    public void setDateTime(LocalDateTime dateTime) {
+        this.dateTime = dateTime;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public void setCalories(int calories) {
+        this.calories = calories;
     }
 
     @Override
\ No newline at end of file
